package(default_visibility = ["//visibility:public"])

licenses(["notice"])

cc_library(
    name = "s2geometry",
    srcs = [
        "src/s2/base/stringprintf.cc",
        "src/s2/base/strtoint.cc",
        "src/s2/encoded_s2cell_id_vector.cc",
        "src/s2/encoded_s2point_vector.cc",
        "src/s2/encoded_s2shape_index.cc",
        "src/s2/encoded_string_vector.cc",
        "src/s2/id_set_lexicon.cc",
        "src/s2/mutable_s2shape_index.cc",
        "src/s2/r2rect.cc",
        "src/s2/s1angle.cc",
        "src/s2/s1chord_angle.cc",
        "src/s2/s1interval.cc",
        "src/s2/s2boolean_operation.cc",
        "src/s2/s2builder.cc",
        "src/s2/s2builder_graph.cc",
        "src/s2/s2builderutil_closed_set_normalizer.cc",
        "src/s2/s2builderutil_find_polygon_degeneracies.cc",
        "src/s2/s2builderutil_s2point_vector_layer.cc",
        "src/s2/s2builderutil_s2polygon_layer.cc",
        "src/s2/s2builderutil_s2polyline_layer.cc",
        "src/s2/s2builderutil_s2polyline_vector_layer.cc",
        "src/s2/s2builderutil_snap_functions.cc",
        "src/s2/s2cap.cc",
        "src/s2/s2cell.cc",
        "src/s2/s2cell_id.cc",
        "src/s2/s2cell_index.cc",
        "src/s2/s2cell_union.cc",
        "src/s2/s2centroids.cc",
        "src/s2/s2closest_cell_query.cc",
        "src/s2/s2closest_edge_query.cc",
        "src/s2/s2closest_point_query.cc",
        "src/s2/s2contains_vertex_query.cc",
        "src/s2/s2convex_hull_query.cc",
        "src/s2/s2coords.cc",
        "src/s2/s2crossing_edge_query.cc",
        "src/s2/s2debug.cc",
        "src/s2/s2earth.cc",
        "src/s2/s2edge_clipping.cc",
        "src/s2/s2edge_crosser.cc",
        "src/s2/s2edge_crossings.cc",
        "src/s2/s2edge_distances.cc",
        "src/s2/s2edge_tessellator.cc",
        "src/s2/s2error.cc",
        "src/s2/s2furthest_edge_query.cc",
        "src/s2/s2latlng.cc",
        "src/s2/s2latlng_rect.cc",
        "src/s2/s2latlng_rect_bounder.cc",
        "src/s2/s2lax_loop_shape.cc",
        "src/s2/s2lax_polygon_shape.cc",
        "src/s2/s2lax_polyline_shape.cc",
        "src/s2/s2loop.cc",
        "src/s2/s2loop_measures.cc",
        "src/s2/s2max_distance_targets.cc",
        "src/s2/s2measures.cc",
        "src/s2/s2metrics.cc",
        "src/s2/s2min_distance_targets.cc",
        "src/s2/s2padded_cell.cc",
        "src/s2/s2point_compression.cc",
        "src/s2/s2point_region.cc",
        "src/s2/s2pointutil.cc",
        "src/s2/s2polygon.cc",
        "src/s2/s2polyline.cc",
        "src/s2/s2polyline_alignment.cc",
        "src/s2/s2polyline_measures.cc",
        "src/s2/s2polyline_simplifier.cc",
        "src/s2/s2predicates.cc",
        "src/s2/s2projections.cc",
        "src/s2/s2r2rect.cc",
        "src/s2/s2region.cc",
        "src/s2/s2region_coverer.cc",
        "src/s2/s2region_intersection.cc",
        "src/s2/s2region_term_indexer.cc",
        "src/s2/s2region_union.cc",
        "src/s2/s2shape_index.cc",
        "src/s2/s2shape_index_buffered_region.cc",
        "src/s2/s2shape_index_measures.cc",
        "src/s2/s2shape_measures.cc",
        "src/s2/s2shapeutil_build_polygon_boundaries.cc",
        "src/s2/s2shapeutil_coding.cc",
        "src/s2/s2shapeutil_contains_brute_force.cc",
        "src/s2/s2shapeutil_edge_iterator.cc",
        "src/s2/s2shapeutil_get_reference_point.cc",
        "src/s2/s2shapeutil_range_iterator.cc",
        "src/s2/s2shapeutil_visit_crossing_edge_pairs.cc",
        "src/s2/s2text_format.cc",
        "src/s2/s2wedge_relations.cc",
        "src/s2/strings/ostringstream.cc",
        "src/s2/strings/serialize.cc",
        "src/s2/util/bits/bit-interleave.cc",
        "src/s2/util/bits/bits.cc",
        "src/s2/util/coding/coder.cc",
        "src/s2/util/coding/varint.cc",
        "src/s2/util/math/exactfloat/exactfloat.cc",
        "src/s2/util/math/mathutil.cc",
        "src/s2/util/units/length-units.cc",
    ] + glob([
        "src/s2/third_party/absl/**/*.cc",
    ]),
    hdrs = glob(
        ["**/*.h", "**/*.inc"],
    ),
    copts = [
        "-Wno-attributes",
        "-Wno-comment",
        "-Wno-deprecated-declarations",
        "-Wno-return-type",
        "-Wno-sign-compare",
        "-Wno-mismatched-tags",
        "-Wno-unused-const-variable",
        "-Wno-unused-function",
    ],
    linkopts = [
        "-lcrypto",
        "-lssl",
    ],
    includes = ["src"],
    deps = [
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/container:compressed_tuple",
        "@com_google_absl//absl/container:container_memory",
        "@com_google_absl//absl/container:fixed_array",
        "@com_google_absl//absl/container:layout",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@com_google_absl//absl/utility",
        "@glog",
    ],
)
